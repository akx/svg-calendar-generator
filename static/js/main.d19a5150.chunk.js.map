{"version":3,"sources":["SVGCalendar.tsx","App.tsx","index.tsx"],"names":["SVGCalendar","date","boxMargin","boxWidth","boxHeight","textXAdj","textYAdj","fontSize","boxStrokeWidth","textXOff","textYOff","boxes","headings","firstOfMonth","dfn","fomWeekday","monthLength","i","y","Math","floor","tx","ty","dayOfMonth","push","transform","x","textAnchor","width","height","fill","stroke","strokeWidth","dominantBaseline","viewBox","App","props","useTweaks","React","Date","setDate","el","className","type","value","representation","onChange","e","target","style","maxWidth","ReactDOMServer","cols","rows","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uSA6EeA,MA1Ef,YA0BE,IARE,IAjBFC,EAiBC,EAjBDA,KAiBC,IAhBDC,iBAgBC,MAhBW,EAgBX,MAfDC,gBAeC,MAfU,GAeV,MAdDC,iBAcC,MAdWD,EAcX,MAbDE,gBAaC,MAbU,EAaV,MAZDC,gBAYC,MAZU,EAYV,MAXDC,gBAWC,MAXU,GAWV,MAVDC,sBAUC,MAVgB,EAUhB,EACKC,EAAWN,EAAW,EAAIE,EAC1BK,EAAWN,EAAY,EAAIE,EAC3BK,EAA2B,GAC3BC,EAA8B,GAC9BC,EAAeC,IAAiBb,GAChCc,EAAaD,IAAcD,GAC3BG,EAAcF,IAAmBD,GAC9BI,EAAI,EAAGA,EAAI,GAAOA,IAAK,CAC9B,IAAMC,EAAIC,KAAKC,MAAMH,EAAI,GAEnBI,EADIJ,EAAI,GACEd,EAAWD,GACrBoB,EAAKJ,GAAKd,EAAYF,GACtBqB,EAAaN,EAAI,EAAIF,EACrBd,EAAOa,IAAYD,EAAcU,GAC7B,IAANL,GACFN,EAASY,KACP,mBAAGC,UAAS,oBAAeJ,EAAf,YAAkC,GAAZnB,EAAtB,KAAZ,SACE,sBAAMwB,EAAGjB,EAAUkB,WAAW,SAASpB,SAAUA,EAAjD,SACGO,IAAWb,EAAM,aAFmCgB,IAOzDM,EAAa,GAAKA,GAAcP,GAClCL,EAAMa,KACJ,oBAAGC,UAAS,oBAAeJ,EAAf,YAAqBC,EAArB,KAAZ,UACE,sBACEM,MAAOzB,EACP0B,OAAQzB,EACR0B,KAAK,OACLC,OAAO,QACPC,YAAaxB,IAEf,sBACEU,EAAGR,EACHgB,EAAGjB,EACHwB,iBAAiB,SACjBN,WAAW,SACXpB,SAAUA,EALZ,SAOGgB,MAfwCN,IAqBnD,OACE,qBAAKiB,QAAQ,cAAb,SACE,oBAAGT,UAAU,mBAAb,UACGb,EACAD,Q,QCjEM,SAASwB,IACtB,IAAMC,EAAQC,YAAU,CACtBnC,UAAW,EACXC,SAAU,GACVC,UAAW,GACXI,eAAgB,EAChBH,SAAU,EACVC,SAAU,EACVC,SAAU,KARgB,EAUJ+B,YAAe,kBAAM,IAAIC,QAVrB,mBAUrBtC,EAVqB,KAUfuC,EAVe,KAWtBC,EAAK,cAAC,EAAD,aAAaxC,KAAMA,GAAUmC,IACxC,OACE,sBAAKM,UAAU,MAAf,UACE,uBACEC,KAAK,OACLC,MAAO9B,IAAcb,EAAM,CAAE4C,eAAgB,SAC7CC,SAAU,SAACC,GAAD,OAAOP,EAAQ1B,IAAaiC,EAAEC,OAAOJ,WAEjD,qBAAKK,MAAO,CAAEC,SAAU,SAAxB,SAAoCT,IACpC,0BACEG,MACE,4CACAO,uBAAoCV,GAEtCW,KAAM,GACNC,KAAM,QC7BdC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACrB,EAAD,MAEFsB,SAASC,eAAe,W","file":"static/js/main.d19a5150.chunk.js","sourcesContent":["import * as React from \"react\";\nimport * as dfn from \"date-fns\";\n\nfunction SVGCalendar({\n  date,\n  boxMargin = 5,\n  boxWidth = 25,\n  boxHeight = boxWidth,\n  textXAdj = 0,\n  textYAdj = 0,\n  fontSize = 12,\n  boxStrokeWidth = 1,\n}: {\n  date: Date;\n  boxMargin?: number;\n  boxWidth?: number;\n  boxHeight?: number;\n  textXAdj?: number;\n  textYAdj?: number;\n  fontSize?: number;\n  boxStrokeWidth?: number;\n}) {\n  const textXOff = boxWidth / 2 + textXAdj;\n  const textYOff = boxHeight / 2 + textYAdj;\n  const boxes: React.ReactNode[] = [];\n  const headings: React.ReactNode[] = [];\n  const firstOfMonth = dfn.startOfMonth(date);\n  const fomWeekday = dfn.getISODay(firstOfMonth);\n  const monthLength = dfn.getDaysInMonth(firstOfMonth);\n  for (let i = 0; i < 7 * 5; i++) {\n    const y = Math.floor(i / 7);\n    const x = i % 7;\n    const tx = x * (boxWidth + boxMargin);\n    const ty = y * (boxHeight + boxMargin);\n    const dayOfMonth = i + 2 - fomWeekday;\n    const date = dfn.setDate(firstOfMonth, dayOfMonth);\n    if (y === 0) {\n      headings.push(\n        <g transform={`translate(${tx} ${-boxMargin * 2})`} key={i}>\n          <text x={textXOff} textAnchor=\"middle\" fontSize={fontSize}>\n            {dfn.format(date, \"cccccc\")}\n          </text>\n        </g>\n      );\n    }\n    if (dayOfMonth > 0 && dayOfMonth <= monthLength) {\n      boxes.push(\n        <g transform={`translate(${tx} ${ty})`} key={i}>\n          <rect\n            width={boxWidth}\n            height={boxHeight}\n            fill=\"none\"\n            stroke=\"black\"\n            strokeWidth={boxStrokeWidth}\n          />\n          <text\n            y={textYOff}\n            x={textXOff}\n            dominantBaseline=\"middle\"\n            textAnchor=\"middle\"\n            fontSize={fontSize}\n          >\n            {dayOfMonth}\n          </text>\n        </g>\n      );\n    }\n  }\n  return (\n    <svg viewBox=\"0 0 297 210\">\n      <g transform=\"translate(20 30)\">\n        {headings}\n        {boxes}\n      </g>\n    </svg>\n  );\n}\nexport default SVGCalendar;\n","import * as React from \"react\";\nimport * as ReactDOMServer from \"react-dom/server\";\nimport \"./styles.css\";\nimport * as dfn from \"date-fns\";\nimport SVGCalendar from \"./SVGCalendar\";\nimport { useTweaks } from \"use-tweaks\";\n\nexport default function App() {\n  const props = useTweaks({\n    boxMargin: 5,\n    boxWidth: 25,\n    boxHeight: 25,\n    boxStrokeWidth: 1,\n    textXAdj: 0,\n    textYAdj: 0,\n    fontSize: 12,\n  });\n  const [date, setDate] = React.useState(() => new Date());\n  const el = <SVGCalendar date={date} {...props} />;\n  return (\n    <div className=\"App\">\n      <input\n        type=\"date\"\n        value={dfn.formatISO(date, { representation: \"date\" })}\n        onChange={(e) => setDate(dfn.parseISO(e.target.value))}\n      />\n      <div style={{ maxWidth: \"800px\" }}>{el}</div>\n      <textarea\n        value={\n          `<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\\n` +\n          ReactDOMServer.renderToStaticMarkup(el)\n        }\n        cols={80}\n        rows={16}\n      />\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}