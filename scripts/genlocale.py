import json

import babel
import babel.core
import subprocess

# Which languages to generate support for.
# For now, this is just the set of aliased locales with the assumption
# that those are pretty common.
from babel.dates import get_day_names

target_languages = set(babel.core.LOCALE_ALIASES)
data = {}
for lang in target_languages:
    loc = babel.Locale.parse(lang)
    data[lang] = {
        "name": loc.english_name,
        "weekdays": {
            size: [
                get_day_names(size, context="stand-alone", locale=loc)[i]
                for i in range(7)
            ]
            for size in ("short", "wide", "abbreviated", "narrow")
        },
    }

locale_info_interface = """
interface LocaleInfo {
  name: string;
  weekdays: {
    short: string[];
    wide: string[];
    abbreviated: string[];
    narrow: string[];
  }
}
"""

script = f"""
// This script is autogenerated by genlocale.py; do not edit by hand.
{locale_info_interface}
const localeData: Record<string, LocaleInfo> = {json.dumps(data, sort_keys=True, ensure_ascii=False)};
export const knownLocales = new Set({json.dumps(sorted(data.keys()))});

export default localeData;
""".strip()

script = subprocess.check_output(
    [
        "./node_modules/.bin/prettier",
        "--parser",
        "typescript",
    ],
    input=script,
    encoding="UTF-8",
)

with open("./src/calendar/localeData.ts", "w") as outf:
    outf.write(script)
